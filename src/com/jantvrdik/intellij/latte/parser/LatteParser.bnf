{
	parserClass="com.jantvrdik.intellij.latte.parser.LatteParser"
	parserUtilClass="com.jantvrdik.intellij.latte.parser.LatteParserUtil"

	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Latte"
	psiImplClassSuffix="Impl"
	psiPackage="com.jantvrdik.intellij.latte.psi"
	psiImplPackage="com.jantvrdik.intellij.latte.psi.impl"
	psiImplUtilClass="com.jantvrdik.intellij.latte.psi.impl.LattePsiImplUtil"

	elementTypeHolderClass="com.jantvrdik.intellij.latte.psi.LatteTypes"
	elementTypeClass="com.jantvrdik.intellij.latte.psi.LatteElementType"
	tokenTypeClass="com.jantvrdik.intellij.latte.psi.LatteTokenType"
}

root             ::= (structureToken)*

// macro
private
macro            ::= macroComment
					| (
					      <<checkPairMacro true>> (<<checkEmptyMacro>> emptyMacro | pairMacro)
						| <<checkPairMacro false>> unpairedMacro
					)

macroComment     ::= T_MACRO_COMMENT

fake
macroClassic     ::= macroTag macroTag?{
                     	methods = [
                     		openTag="macroTag[0]"
                     		closeTag="macroTag[1]"
                     	]
                     }

pairMacro        ::= macroOpenTag structureToken* macroCloseTag? { //incomplete pair macro is handled in a annotator
					extends=macroClassic
				    }


emptyMacro       ::= emptyMacroTag {
					extends=macroClassic
                    }


unpairedMacro    ::= macroOpenTag {
					extends=macroClassic
					}

fake
macroTag         ::= classicMacroContent {
                     	methods = [
                     		getMacroName
                     		macroContent="macroContent"
                     	]
                     }

macroOpenTag     ::= T_MACRO_OPEN_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE {
						pin=1
                     	extends = macroTag
                     }
macroCloseTag    ::= T_MACRO_CLOSE_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE {
						pin=1
                     	extends = macroTag
                     }
emptyMacroTag    ::= T_MACRO_OPEN_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE_EMPTY {
						pin=1
                     	extends = macroTag
                     }


private
classicMacroContent     ::= macroName macroContent?

macroContent ::= (T_MACRO_ARGS_NUMBER | T_MACRO_ARGS_SYMBOL
			   | T_MACRO_ARGS_OBJECT_OPERATOR | T_MACRO_ARGS_PAAMAYIM_NEKUDOTAYIM
			   | T_MACRO_ARGS_LEFT_BRACKET | T_MACRO_ARGS_RIGHT_BRACKET
			   | T_MACRO_ARGS_LEFT_CURLY_BRACKET | T_MACRO_ARGS_RIGHT_CURLY_BRACKET
			   | T_MACRO_ARGS_LEFT_SQUARE_BRACKET | T_MACRO_ARGS_RIGHT_SQUARE_BRACKET
			   | T_MACRO_ARGS_VAR | T_MACRO_ARGS_COMMA | T_MACRO_ARGS_IDENTIFIER
			   | T_MACRO_ARGS_QUESTION_MARK | T_MACRO_ARGS_COLON | T_MACRO_ARGS_COALESCE
			   | T_MACRO_ARGS_BINARY_OPERATOR | T_MACRO_ARGS_DOUBLE_ARROW
			   | T_MACRO_ARGS_INC | T_MACRO_ARGS_DEC | T_MACRO_ARGS_SHUTUP
			   | T_MACRO_ARGS_NOT | T_MACRO_ARGS_INSTANCEOF | T_MACRO_ARGS_NEW | T_MACRO_ARGS_ARRAY
			   | T_MACRO_ARGS_OTHER | T_MACRO_ARGS_DOLLAR | T_MACRO_ARGS_NEG | T_MACRO_ARGS_ELLIPSIS
			   | T_MACRO_ARGS_CLONE | T_MACRO_ARGS_ISSET | T_MACRO_ARGS_UNSET | T_MACRO_ARGS_LIST
			   | T_MACRO_ARGS_EMPTY | T_MACRO_ARGS_MODIFIERS | macroString)+

macroString ::= singleQuotedString | doubleQuotedString

private
macroName        ::= T_MACRO_NAME
                   | T_MACRO_NOESCAPE? T_MACRO_SHORTNAME?

private
singleQuotedString ::= T_MACRO_ARGS_SINGLE_QUOTE_LEFT T_MACRO_ARGS_STRING? T_MACRO_ARGS_SINGLE_QUOTE_RIGHT {pin=1}

private
doubleQuotedString ::= T_MACRO_ARGS_DOUBLE_QUOTE_LEFT ( T_MACRO_ARGS_STRING | T_MACRO_ARGS_VAR)* T_MACRO_ARGS_DOUBLE_QUOTE_RIGHT {pin=1}



// netteAttr
netteAttr        ::= T_HTML_TAG_NATTR_NAME T_WHITESPACE* (T_HTML_TAG_ATTR_EQUAL_SIGN netteAttrValue)? {
                        methods = [
                            attrName="T_HTML_TAG_NATTR_NAME"
                            attrValue="netteAttrValue"
                        ]
                     }

netteAttrValue   ::= T_HTML_TAG_ATTR_SQ macroContent? T_HTML_TAG_ATTR_SQ
                   | T_HTML_TAG_ATTR_DQ macroContent? T_HTML_TAG_ATTR_DQ
                   | macroContent?

outerHtml ::= T_TEXT;

// tokens sets
private
structureToken   ::= outerHtml | macro | netteAttr


private
topLevelTokens   ::= T_MACRO_CLASSIC T_MACRO_CONTENT topLevelTokens
